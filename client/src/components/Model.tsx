/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/globe-optimized-transformed.glb --transform --types --output src/components/Model.tsx 
Files: public/models/globe-optimized-transformed.glb [817.38KB] > C:\Users\ravik\OneDrive\Desktop\Deep code\deep-code-viewer\client\src\components\globe-optimized-transformed-transformed.glb [47.34KB] (94%)
*/

import * as THREE from "three";
import React, { JSX, useRef, useEffect } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useFrame } from "@react-three/fiber";
type ActionName = "world" | "world.001" | "world.002";

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}

type GLTFResult = GLTF & {
  nodes: {
    world_1: THREE.Mesh;
    world_2: THREE.Mesh;
    world001: THREE.Mesh;
    world002: THREE.Mesh;
  };
  materials: {
    ["Material.005"]: THREE.MeshStandardMaterial;
    ["Material.002"]: THREE.MeshStandardMaterial;
    ["Material.003"]: THREE.MeshStandardMaterial;
    ["Material.006"]: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

export function Model(props: JSX.IntrinsicElements["group"]) {
  const groupRef = React.useRef<THREE.Group>(null!);
  const { nodes, materials, animations } = useGLTF(
    "/models/globe-optimized-transformed.glb"
  ) as unknown as GLTFResult;
  const { actions } = useAnimations(animations, groupRef);
  // Add this new, more precise useEffect
  // src/components/Model.tsx

  useEffect(() => {
    // A list of all materials in your model
    const allMaterials = [
      materials["Material.005"],
      materials["Material.002"],
      materials["Material.003"],
      materials["Material.006"],
    ];

    const linesMaterialName = "Material.003";

    allMaterials.forEach((material) => {
      if (!material) return;
      if (material.name === linesMaterialName) {
        material.color = new THREE.Color("#ffffff");
        material.emissive = new THREE.Color("#1a1a1a");
        material.emissiveIntensity = 0.5;
        material.metalness = 1.5;
        material.roughness = 0.4;
        material.transparent = false;
        material.opacity = 1;
      } else if (material.name === "Material.002") {
        material.color = new THREE.Color("#00ff73");
        material.emissive = new THREE.Color("#00ff73");
        material.emissiveIntensity = 0.8;
      } else {
        material.color = new THREE.Color("#1a1a1a");
        //material.metalness = 1.2;
        //  material.roughness = 0.4;

        material.emissive = new THREE.Color("#000000");
        material.transparent = true;
        material.opacity = 0.1;
      }
    });
  }, [materials]);
  useFrame(() => {
    if (groupRef.current) {
      groupRef.current.rotation.y += 0.001;
    }
  });

  return (
    <group ref={groupRef} {...props} dispose={null}>
      <group name="Scene">
        <group name="world" scale={0.981}>
          <mesh
            name="world_1"
            geometry={nodes.world_1.geometry}
            material={materials["Material.005"]}
          />
          <mesh
            name="world_2"
            geometry={nodes.world_2.geometry}
            material={materials["Material.002"]}
          />
        </group>
        <mesh
          name="world001"
          geometry={nodes.world001.geometry}
          material={materials["Material.003"]}
          scale={0.981}
        />
        <mesh
          name="world002"
          geometry={nodes.world002.geometry}
          material={materials["Material.006"]}
          scale={0.981}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/models/globe-optimized-transformed.glb");
